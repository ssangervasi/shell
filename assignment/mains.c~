/*
 * project 1 (shell) main.c template 
 *
 * Sebastian Sangervasi and Nickie VanMeter
 *
 */

/* you probably won't need any other header files for this project */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <ctype.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <poll.h>
#include <signal.h>
#include <errno.h>
#include <assert.h>

char** arrConcat(char** addto, char** addition, int* tosize, int* addsize);
char** tokenify(char* str);


int main(int argc, char **argv) {
    char *prompt = ";) ";
    printf("%s", prompt);
    fflush(stdout);
    
    char buffer[1024];
    while (fgets(buffer, 1024, stdin) != NULL) {
        /* process current command line in buffer */
        /* just a hard-coded command here right now */
        
        char *cmd[] = { "/bin/ls", "-ltr", ".", NULL };

	int buflen = 1023;
	int i = 0;
	while( i<buflen && buffer[i] != '#'){
		i++;
	}
	buffer[i] = '\0';
	buflen = i-1;
	
	char *** commands = parseCommand(buffer);

    pid_t p = fork();
    if (p == 0) {
            /* in child */
            if (execv(cmd[0], cmd) < 0) {
                fprintf(stderr, "execv failed: %s\n", strerror(errno));
            }

    } else if (p > 0) {
            /* in parent */
            int rstatus = 0;
            pid_t childp = wait(&rstatus);

            /* for this simple starter code, the only child process we should
               "wait" for is the one we just spun off, so check that we got the
               same process id */ 
            assert(p == childp);

            printf("Parent got carcass of child process %d, return val %d\n", childp, rstatus);
    } else {
            /* fork had an error; bail out */
            fprintf(stderr, "fork failed: %s\n", strerror(errno));
    }

    printf("%s", prompt);
    fflush(stdout);
    }
    printf("exited\n");
    return 0;
}

char*** parseCommand(char* comlist)
{
	
	int i = 0;
	int comlen = strlen(comlist);
	int* semindex = malloc(sizeof(int)*(comlen+1));
	int john = 1; //number of last valid semicolon (length of semindex) 
	semindex[0] = 0;
	int lastcom = 0;
	for(; i < comlen; i++){
		if(comlist[i] == ';'){
			semindex[john] = i;
			john++;
			
		} else if(!isspace(comlist[i])){
			lastcom = john;
		}
	}
	char *** parsed = malloc(sizeof(char**)*john); //with a reminder to set the last element to NULL
	i = 0;
	char* totoken;
	for(; i < john; i++){
		totoken = strndup(comlist[i], sizeof(char)*(semindex[i+1]-semindex[i]));
		parsed[i] = tokenify(totoken);
		free(totoken);
	}	
	free(semindex);
	
	return parsed;
}

/* 	Array Concatonation is a helper function I wrote that is used in "tokenify"  
	to make the combination of the total array and a buffer array (of strings).
*/
char** arrConcat(char** addto, char** addition, int* tosize, int* addsize)
{
	int i=0;
	int j=0;
	int totsize = (*tosize)+(*addsize)+1;
	//int memsize;
	char** newarr = malloc(totsize*sizeof(char*));
	while(i<*tosize){
		//memsize = strlen(addto[i])*sizeof(char);
		newarr[i] = strdup(addto[i]);
		free(addto[i]);
		i++; 
	}	
		
	while(j<*addsize){
		//memsize = strlen(addition[j])*sizeof(char);
		newarr[i] = strdup(addition[j]);
		free(addition[j]);
		i++;
		j++;
	}
	free(addto);
	return newarr; 
}

char** tokenify(char* str)
{
	int i = 0;
	const int slen = strlen(str);
	int buffsize =6; // I'm using this variable so that you can set how big the buffer is during this process not including the concluding NULL element.
	int totalsize = 0; //Refers to the number of places in totalarray that are not the concluding NULL element. 
	
	char** totalarray = malloc(sizeof(char*));
	char** buffarray = malloc(sizeof(char*)*(buffsize+1));
	int inbuff = 0;
	
	char* begin = NULL;
	int gotill = -1;
	int fullword = 0;
	int upto = 0;

	totalarray[0] = NULL;

	for(; i<=slen; i++){
		if(!isspace(str[i])){
			if(begin == NULL){
				begin = (str+i);
			}			
			gotill++;
						
		}
		else{
			if(begin != NULL){
				gotill++;
				fullword = 1;
			}
			
			if(begin != NULL && 1 == fullword){
				
				buffarray[inbuff] = malloc(sizeof(char)*(gotill+1));
				for(; upto<gotill; upto++){
					(buffarray[inbuff])[upto]= *(begin+upto);
				}
				(buffarray[inbuff])[gotill] = '\0';
				
				inbuff++;
				gotill=-1;
				begin = NULL;
				upto = 0; 
				fullword = 0;	
			
				if(buffsize==inbuff){					
					totalarray = arrConcat(totalarray, buffarray, &totalsize, &buffsize);
					totalsize += (buffsize);
					inbuff = 0;						
					free(buffarray);	
					buffarray = malloc(sizeof(char*)*(buffsize+1));
					
				}
			}
			
		}
	}
	if(inbuff>0){		
		totalarray = arrConcat(totalarray, buffarray, &totalsize, &inbuff);		
	}
	free(buffarray); //I hope I have taken care of all memory leaks...
	return totalarray;
}

